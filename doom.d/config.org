#+TITLE:  Literate config for my editor
#+AUTHOR: Tobias Carlsson
#+STARTUP: overview

* Introduction
  This is my WIP literate config for the Doom Emacs framework...

  - Doom Emacs ::
    I have jumped editors more times than I can count, and every time I jumped back
    to Emacs to give it another shot, I rolled my own config out of curiosity and stubbornness.
    While this resulted in me learning a whole lot about my now favorite OS, for example
    how much of an absolute pain it can be to configure from scratch, it took hours of my life away.
    Since the config I had built up previously was heavily Doom inspired (with my own personal
    chaotic flair to it), I decided to put in less effort and just use the damned framework.

  - Bleeding edge ::
    I use the master build of Emacs, staying mostly in sync with the Git repository.
    I also use the recently merged native-comp feature, because *speed*.

  - Thank you ::
    Without the absolutely lovely and dedicated Emacs community and their seemingly
    arcane elisp knowledge I would probably still be on Vim/Neovim right now, so
    a huge thanks to all the people who's code I've yoinked snippets from all
    over the internet.
     - https://github.com/lucasgruss/.doom.d has been a huge boon +-mode+ for both my
       literate config, my doom config, and my EXWM config.

* System tools
** EMMS

*** TODO

* Bindings
** Kakoune
This doesn't tangle into config.el, I currently use Objed instead.
I do wish this package was more polished.
  #+begin_src emacs-lisp :tangle no

(defun last-in-word ()
   (interactive)
   (forward-word)
   (backward-char))

(use-package! kakoune
  :commands ryo-modal-mode
  ;; Having a non-chord way to escape is important, since key-chords don't work in macros
  :bind (("C-z" . ryo-modal-mode)
         ("<escape>" . ryo-enter))
  :hook
  (after-init . my/kakoune-setup)
  ((prog-mode text-mode) . ryo-enter)

  :config
  (defun ryo-enter () "Enter normal mode" (interactive) (ryo-modal-mode 1))

  (defun my/kakoune-setup ()
      "Call kakoune-setup-keybinds and then add some personal config."
      (kakoune-setup-keybinds)

      ;; Cursor config
      (setq-default cursor-type '(bar . 1))
      (setq ryo-modal-cursor-type 'box)
      (setq ryo-modal-cursor-color "#ffffff")
      (setq ryo-modal-default-cursor-color "#ffffff")

      (define-key ryo-modal-mode-map (kbd "SPC h") 'help-command)
      (define-key ryo-modal-mode-map (kbd "z") ctl-x-map)

      (ryo-modal-keys
       ("," save-buffer)
       ("e" last-in-word :first '(kakoune-set-mark-here))
       ("E" last-in-word :first '(kakoune-set-mark-if-inactive))
       ("P" counsel-yank-pop)
       ("m" mc/mark-next-like-this)
       ("M" mc/skip-to-next-like-this)
       ("n" mc/mark-previous-like-this)
       ("N" mc/skip-to-previous-like-this)
       ("M-m" mc/edit-lines)
       ("*" mc/mark-all-like-this)
       ("v" er/expand-region)
       ("C-v" set-rectangular-region-anchor)
       ("M-s" mc/split-region)
       (";" (("q" delete-window)
             ("v" split-window-horizontally)
             ("s" split-window-vertically)))
       ("C-w h" windmove-left)
       ("C-w j" windmove-down)
       ("C-w k" windmove-up)
       ("C-w l" windmove-right)
       ("C-u" scroll-down-command :first '(deactivate-mark))
       ("C-d" scroll-up-command :first '(deactivate-mark)))))
  (ryo-modal-mode)

;; This overrides the default mark-in-region with a prettier-looking one,
;; and provides a couple extra commands
(use-package! visual-regexp
  :ryo
  ("s" vr/mc-mark)
  ("?" vr/replace)
  ("M-/" vr/query-replace))

;; Emacs incremental search doesn't work with multiple cursors, but this fixes that
(use-package! phi-search
  :bind (("C-s" . phi-search)
         ("C-r" . phi-search-backward)))

;; Probably the first thing you'd miss is undo and redo, which requires an extra package
;; to work like it does in kakoune (and almost every other editor).
(use-package! undo-tree
  :config
  (global-undo-tree-mode)
  (undo-tree-mode)
  :ryo
  ("u" undo-tree-undo)
  ("U" undo-tree-redo)
  ("SPC u" undo-tree-visualize)
  :bind (:map undo-tree-visualizer-mode-map
              ("h" . undo-tree-visualize-switch-branch-left)
              ("j" . undo-tree-visualize-redo)
              ("k" . undo-tree-visualize-undo)
              ("l" . undo-tree-visualize-switch-branch-right)))
  #+end_src

* User Interface
    Fairly self-explanatory, just some UI hacks to fix things up a little.

** Font
    Speaking of Hacks, it's the TTF font I prefer
    #+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Hack" :size 12))
    #+end_src

** Theme
    Doom-one fits in with my system config
    #+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-one)
    #+end_src

* Misc
** Tree sitter
#+begin_src emacs-lisp :tangle config.el
(use-package! tree-sitter
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (add-to-list 'tree-sitter-major-mode-language-alist '(rustic-mode . rust)))

(use-package! tree-sitter-langs)
#+end_src

** Eva
#+begin_src emacs-lisp :tangle config.el
(use-package! eva)
#+end_src
