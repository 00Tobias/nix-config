#+TITLE:  Literate config for my editor
#+AUTHOR: Tobias Carlsson
#+STARTUP: overview

* My config of the Doom framework for the Emacs Operating system
* Multimedia
** EMMS

*** TODO

** Eva
An "Emacs based Virtual Assistant"
#+begin_src emacs-lisp :tangle packages.el
(package! eva
  :recipe (:host github :repo "meedstrom/eva"
           :files (:defaults "assets"  "renv" "*.R" "*.gnuplot")))
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! eva)
#+end_src
** Elpher
drew devault sim
#+begin_src emacs-lisp :tangle packages.el
(package! elpher)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! elpher)
#+end_src
* Bindings
** Kakoune
This doesn't tangle into config.el, I currently use Evil mode.
I do wish this package was more polished though...
  #+begin_src emacs-lisp :tangle no

(defun last-in-word ()
   (interactive)
   (forward-word)
   (backward-char))

(use-package! kakoune
  :commands ryo-modal-mode
  ;; Having a non-chord way to escape is important, since key-chords don't work in macros
  :bind (("C-z" . ryo-modal-mode)
         ("<escape>" . ryo-enter))
  :hook
  (after-init . my/kakoune-setup)
  ((prog-mode text-mode) . ryo-enter)

  :config
  (defun ryo-enter () "Enter normal mode" (interactive) (ryo-modal-mode 1))

  (defun my/kakoune-setup ()
      "Call kakoune-setup-keybinds and then add some personal config."
      (kakoune-setup-keybinds)

      ;; Cursor config
      (setq-default cursor-type '(bar . 1))
      (setq ryo-modal-cursor-type 'box)
      (setq ryo-modal-cursor-color "#ffffff")
      (setq ryo-modal-default-cursor-color "#ffffff")

      (define-key ryo-modal-mode-map (kbd "SPC h") 'help-command)
      (define-key ryo-modal-mode-map (kbd "z") ctl-x-map)

      (ryo-modal-keys
       ("," save-buffer)
       ("e" last-in-word :first '(kakoune-set-mark-here))
       ("E" last-in-word :first '(kakoune-set-mark-if-inactive))
       ("P" counsel-yank-pop)
       ("m" mc/mark-next-like-this)
       ("M" mc/skip-to-next-like-this)
       ("n" mc/mark-previous-like-this)
       ("N" mc/skip-to-previous-like-this)
       ("M-m" mc/edit-lines)
       ("*" mc/mark-all-like-this)
       ("v" er/expand-region)
       ("C-v" set-rectangular-region-anchor)
       ("M-s" mc/split-region)
       (";" (("q" delete-window)
             ("v" split-window-horizontally)
             ("s" split-window-vertically)))
       ("C-w h" windmove-left)
       ("C-w j" windmove-down)
       ("C-w k" windmove-up)
       ("C-w l" windmove-right)
       ("C-u" scroll-down-command :first '(deactivate-mark))
       ("C-d" scroll-up-command :first '(deactivate-mark)))))
  (ryo-modal-mode)

;; This overrides the default mark-in-region with a prettier-looking one,
;; and provides a couple extra commands
(use-package! visual-regexp
  :ryo
  ("s" vr/mc-mark)
  ("?" vr/replace)
  ("M-/" vr/query-replace))

;; Emacs incremental search doesn't work with multiple cursors, but this fixes that
(use-package! phi-search
  :bind (("C-s" . phi-search)
         ("C-r" . phi-search-backward)))

;; Probably the first thing you'd miss is undo and redo, which requires an extra package
;; to work like it does in kakoune (and almost every other editor).
(use-package! undo-tree
  :config
  (global-undo-tree-mode)
  (undo-tree-mode)
  :ryo
  ("u" undo-tree-undo)
  ("U" undo-tree-redo)
  ("SPC u" undo-tree-visualize)
  :bind (:map undo-tree-visualizer-mode-map
              ("h" . undo-tree-visualize-switch-branch-left)
              ("j" . undo-tree-visualize-redo)
              ("k" . undo-tree-visualize-undo)
              ("l" . undo-tree-visualize-switch-branch-right)))
  #+end_src

* User Interface
    Fairly self-explanatory, just some UI hacks to fix things up a little.
** Font
    Speaking of Hacks
    #+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Hack" :size 12))
    #+end_src

** Theme
    #+begin_src emacs-lisp :tangle config.el
;; Uses my custom theme in `themes'
(setq doom-theme 'doom-one-darker)
    #+end_src
** Line numbers
    #+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type 'visual)
    #+end_src

* Lang
** Tree sitter
#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! tree-sitter
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  ;; Fix compatibility with rustic-mode
  (add-to-list 'tree-sitter-major-mode-language-alist '(rustic-mode . rust))
  
  ;; Add a few extra langs I use
  (add-to-list 'tree-sitter-major-mode-language-alist '(fennel-mode . fennel))
  (add-to-list 'tree-sitter-major-mode-language-alist '(nix-mode . nix))
  (add-to-list 'tree-sitter-major-mode-language-alist '(elisp-mode . elisp))
  (add-to-list 'tree-sitter-major-mode-language-alist '(zig-mode . zig)))
#+end_src
** Elisp
Use lsp in config.org
https://github.com/hlissner/doom-emacs/issues/4526 is merged
#+begin_src emacs-lisp :tangle config.el
(defun org-babel-edit-prep:elisp (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src
** Nix
Currently doom emacs uses nixfmt, I prefer nixpkgs-fmt to it.
This should be available as a module in Doom once
https://github.com/hlissner/doom-emacs/issues/4526 is merged
#+begin_src emacs-lisp :tangle packages.el
(package! nixpkgs-fmt)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! nixpkgs-fmt
  :config
  (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode))
#+end_src

Doom doesn't have a `+lsp` flag for :nix
#+begin_src emacs-lisp :tangle no
(add-hook 'nix-mode-local-vars-hook #'lsp!)
#+end_src
* Misc
